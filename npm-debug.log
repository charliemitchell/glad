0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.10.0
3 info using node@v0.12.0
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/private/var/www/glad',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory /Users/charlie/.npm/glad/0.1.8/package.tgz not in flight; packing
10 verbose tar pack [ '/Users/charlie/.npm/glad/0.1.8/package.tgz',
10 verbose tar pack   '/private/var/www/glad' ]
11 verbose tarball /Users/charlie/.npm/glad/0.1.8/package.tgz
12 verbose folder /private/var/www/glad
13 info prepublish glad@0.1.8
14 verbose addLocalTarball adding from inside cache /Users/charlie/.npm/glad/0.1.8/package.tgz
15 silly cache afterAdd glad@0.1.8
16 verbose afterAdd /Users/charlie/.npm/glad/0.1.8/package/package.json not in flight; writing
17 verbose afterAdd /Users/charlie/.npm/glad/0.1.8/package/package.json written
18 silly publish { name: 'glad',
18 silly publish   version: '0.1.8',
18 silly publish   description: 'A node Js Scaffold for rapidly building REST API\'s. A Wrapper around express and mongoose with some built in transformations. Currently we are supporting Stacks that use (of course Node) but also Mongo DB (hence the mongoose ODM), and (not required) Redis for session handling.',
18 silly publish   main: './lib/index.js',
18 silly publish   author: { name: 'Charlie Mitchell', email: 'charliesemailis@gmail.com' },
18 silly publish   license: 'MIT',
18 silly publish   keywords:
18 silly publish    [ 'express framework',
18 silly publish      'api',
18 silly publish      'apis',
18 silly publish      'framework',
18 silly publish      'api only',
18 silly publish      'mongoose',
18 silly publish      'express',
18 silly publish      'node api',
18 silly publish      'REST',
18 silly publish      'rest generator',
18 silly publish      'blueprint',
18 silly publish      'scaffold',
18 silly publish      'Restful',
18 silly publish      'glad',
18 silly publish      'glad api' ],
18 silly publish   bugs:
18 silly publish    { url: 'http://github.com/charliemitchell/glad',
18 silly publish      email: 'charliesemailis@gmail.com' },
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git+ssh://git@github.com/charliemitchell/glad.git' },
18 silly publish   bin: { glad: './bin/glad.js' },
18 silly publish   dependencies:
18 silly publish    { 'body-parser': '^1.12.0',
18 silly publish      errorhandler: '1.3.4',
18 silly publish      colors: '1.0.3',
18 silly publish      'connect-redis': '^2.2.0',
18 silly publish      'cookie-parser': '^1.3.4',
18 silly publish      express: '4.x.x',
18 silly publish      'express-session': '^1.10.3',
18 silly publish      lodash: '^3.2.0',
18 silly publish      'method-override': '^2.3.1',
18 silly publish      mongoose: '3.8.23',
18 silly publish      ncp: '^1.0.1',
18 silly publish      optimist: '^0.6.1',
18 silly publish      redis: '^0.12.1',
18 silly publish      sanitizer: '0.1.2',
18 silly publish      bluebird: '2.9.13',
18 silly publish      moment: '^2.9.0' },
18 silly publish   readme: '# GLAD\n\n## Required\n* [Node.js](http://nodejs.org/) (with NPM)\n\n\n## Optional\n* [Redis](http://redis.io/)\n* [Mongo DB](http://mongodb.org/)\n\n## Installation\n\n* `(sudo) npm install -g glad`\n\n## Running / Development\n\n*  to create a new glad server\n * Create a Folder Named foo: `glad new foo` OR  `mkdir foo`\n * Go Inside the folder: `cd foo`\n * Generate an endpoint for the route bar: `glad api bar && cd src`\n * Start The Server: `glad s` Or run the tests `npm test`\n* Visit your app at [http://localhost:4242/bar](http://localhost:4242/bar).\n\n## Some Built In Validations\nGlad comes packaged with some built in validations for your model. We use Google\'s Caja (the sanitize package) as the default sanitizer, furthermore we have built in some really nice features around the mongoose setter. So far we have provided some common transformations.\n* sentence case\n * lor ipsom. dol amore. --> Lor ipsom. Dol amore. \n* lower case\n * Myemail@Mail.com --> myemail@mail.com\n* upper case\n * acme inc --> ACME INC\n* title case\n * acme inc --> Acme Inc\n* number\n * \'1234\' --> 1234 \n* sanitize\n\n## Mimimal setup required...\n### Open your config file... (Already set up to defaults)\n```js\n    //....\n\n    port : 4242, //<--- Choose a Port (Defaults 4242) \n\n    sessionless : false, //<--- Set True if you don\'t want to use a session\n\n    verbose : false, //<--- Level of logging\n    \n    // ...\n    \n    bodyParser : \'json\', // What Kind of API is this \n\n    redis : {\n      host: localhost,\n      port: 6379\n      key : \'sess:\' // <---- Your Session Key\n    },\n\n    cookie : {\n      name : \'yourcookie.id\', //<--- Your Cookie Name\n      secret: \'Your session secret\' // <---- Your Session Secret\n    },\n\n    // MongoDB (Just Remove this entire key if you would like to run without mongo DB)\n    mongodb : {\n        host : localhost,\n        port : 27017,\n        database : \'yourdatabase\'\n    }\n    \n    // etc..\n```\n\n### Now Open Up your Model File \n(This will be pre-generated, all you have to do is define your model)\n\n```js\n    var Bar = new Schema({\n        // <--- Define your model in here\n        /* Example\n            name : {\n                type : String,\n                set : setter.titleCase\n            },\n            address : {\n                type : String\n            }\n        */\n    });\n```\n\n### Lastly Setup your Policy,\n(this is also pre-generated)\n```js\nmodule.exports = {\n    \n    onFailure : function (req, res) {\n        res.json({auth : false, error : "Not Logged In"}); // <---- What do you do when they are not logged in\n    },\n\n    authenticated : function (req, res, accept, reject) {\n        if (req.session) {\n            if (req.session.loggedin) { // <--- what key on the session say\'s they are logged in ?\n                accept(); // accept the request, all is good\n            } else {\n                reject(); // reject the request, this will end up calling the above onFailure method\n            }\n        } else {\n            reject(); \n        }\n    }\n\n    // <--- add additional policies if needed\n};\n```\n\n### More fine grained control.\nThe Hooks File Provides hooks that fire while your server is being constructed. You can acess the app object as well as the express object using these hooks. This way if you need to extend the app object before or after a specific "app.use" you can do this here. The hooks object will fire sequentially from top to bottom so it makes it easy to figure out in what order the app is being configured, as well as at what point you would like to extend the app object.\n\n## Routing\nRouting is centered around REST. In the routes folder file you will find your routes. The routes object is organized by request method. this will eventually make it\'s way to the express router.\n```js\nmodule.exports = {\n    GET: [{\n        path: \'/users\',         // <--- what url does this entry match\n        action: \'getUserList\',  // <--- what controller method should handle this request\n        policy: \'authenticated\' // <--- what poily applies to this route\n    },{\n        path: \'/users/:id\',\n        action: \'getUserById\',\n        policy: \'authenticated\'\n    }],\n\n    POST: [{\n        path: \'/users\',\n        action: \'createUser\',\n        policy: \'authenticated\'\n    }],\n\n\n    PUT: [{\n        path: \'/users/:id\',\n        action: \'updateUser\',\n        policy: \'authenticated\'\n    }],\n\n    DELETE: [{\n        path: \'/users/:id\',\n        action: \'deleteUser\',\n        policy: \'authenticated\'\n    }]\n}\n```\nAs you can see you have an array of Get, Post, Put, Delete methods. the combination of request method and url are used to determine the action to take, and the policy to implement. \n* path : matching url\n* action : the controller method to call when this route is matched\n* policy : the policy method to call in order to determine if the action is allowed. * see policies.js\n\n\n### Glad Exposes any of it\'s dependencies or tools to you via the glad object.\n```js\n    require(\'glad\').mongoose  // <-- the mongoose ODM\n    require(\'glad\').colors    // <-- colors for your logs\n    require(\'glad\').lodash    // <-- similar to underscore, with a few enhancements\n    require(\'glad\').express   // <-- express js\n    require(\'glad\').promise   // <-- bluebird (async awesomeness)\n    require(\'glad\').moment    // <-- awesome date library\n    require(\'glad\').utility   // <-- utility class\n    require(\'glad\').setter    // <-- Model Transforms\n    require(\'glad\').logger    // <-- Logging Class\n    require(\'glad\').mongoose  // <-- ODM\n    require(\'glad\').promise   // <-- Bluebird (https://www.npmjs.com/package/bluebird)\n    require(\'glad\').session   // <-- Session (express-session)\n    require(\'glad\').ncp       // <-- NCP (https://www.npmjs.com/package/ncp)\n    require(\'glad\').redis     // <-- Redis Client (https://www.npmjs.com/package/redis)\n    require(\'glad\').connectRedis  // <-- Redis Store (https://www.npmjs.com/package/connect-redis)\n    require(\'glad\').errorHandler // Express Error Handler\n    require(\'glad\').cookieParser // <-- Redis Store (https://www.npmjs.com/package/cookie-parser)\n    require(\'glad\').methodOverride // (https://www.npmjs.com/package/method-override)\n    require(\'glad\').optimist // <-- process arguments utility (https://www.npmjs.com/package/optimist)\n    require(\'glad\').sanitizer // <-- String Sanitization (Based on Google\'s Caja) (https://www.npmjs.com/package/sanitizer)\n```\n\n### The Utility Class\nFor now, there are a few utility methods. I\'ll work on rollling out much more, soon. I take requests!\n```js\n    var utility = require(\'glad\').utility,\n        object = utility.object;\n\n    var foo = {\n        a: "a",\n        b: "b",\n        c: {\n            a : [\n                {\n                    a : "a"\n                }\n            ]\n        }\n    };\n\n    var fooClone = object.clone(foo); // <--- Fully Cloned Version Of foo.\n    var fooLike = object.extend(foo, {a : "new a"}); // <--- Fully Cloned, Props Overwritten.\n\n```\n\n## Docker\nIf you are using docker, glad will automatically generate a Dockerfile for you. If Not, Just ignore it.\n## Vagrant\nGlad will auto generate a Vagrant file with Ubuntu as part of the default blueprint. It also includes a bootstrap.sh file that will run when Vagrant Creates your VM. By Default it installs docker.\n\n## Stubs (Blueprinting) *NOT READY QUITE YET\nWith Glad you can create stubs and generate new services based on any template you would like. The templating is very straight forward. See the blueprints folder to see what a blueprint looks like.\n* To Generate a service from a blueprint\n* `glad stub /path/to/stub/ --model users`\n\nThis will (recursively) copy all files from the path given to the current working directory, and fill in all of the template variables with the name of the model given.\n\n## Testing\nSome basic tests are written for you, any route that you define in the router will be tested when running npm test. You should run your tests from the src directory.\n\n## Additional Commands\n`glad set port 1234` will change the port to 1234 in your config file, (and your dockerfile if you have one). (you can pass in any number for your port)\n\n`glad p --editor=subl` will set the default editor for your projects to sublime. (This should be the bash command used to open your editor) (in bash: subl .)\n\n`glad p --editor=atom` will set the default editor for your projects to atom (provided that atom\'s binary is symlinked). (This should be the bash command used to open your editor) (in bash: atom .)\n\n## Common Mistakes\n* You must use a Content-Type header in your request, otherwise the body will never get parsed.\n\n\n## How To\'s\n#### Create a session\n\n```js\n// controllers/login.js\n/*\nUsers Model Gets Required in, \nsanitizer gets required in, \nbcrypt get\'s installed and required in if you use it) \netc...\n*/\nPOST : function (req, res) {\n\n        Users.find({\n            email : sanitize(req.body.email),\n        }).exec(function (err, users) {\n\n            if (users.length) {\n\n                var user = users[0];\n\n                if (bcrypt.compare(sanitize(req.body.password))) {\n                    req.session.authenticated = true; // Create A Valid Session\n                    req.session.user = user; // Store Some Data on the session\n                    res.json(user);\n\n                } else {\n                    res.json({\n                        err : "The password does not match our records."\n                    });\n                }\n            } else {\n                res.json({\n                   err : "The Email " +  sanitize(req.body.email) + " Does Not Exist."\n                });\n            }\n        });\n    }\n    //etc...\n```\n\n## Using Your Own Session Implementation\nIn The middleware.js file, simply add a method called session.\n```js\n{\n    //etc...\n    session : function (app) {\n        // Create Your Session Here instead of the default provided by Glad (If you want to use something other than redis, or your own implementation)\n    }\n    //etc...\n}\n```\n\n## GITHUB\n* [glad](https://www.github.com/charliemitchell/glad) ',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '9084217347c1c5fae741813b5c3d353d8f843ef8',
18 silly publish   homepage: 'https://github.com/charliemitchell/glad#readme',
18 silly publish   _id: 'glad@0.1.8',
18 silly publish   scripts: {},
18 silly publish   _shasum: 'a5955b51239bd4f7ae45d8f7ec333a79189001e5',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name glad
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/glad
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /Users/charlie/.npm/glad/0.1.8/package.tgz
26 verbose request uri https://registry.npmjs.org/glad
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 2:02:00 PM
29 verbose request id 3ede4e2e26ca197c
30 http request PUT https://registry.npmjs.org/glad
31 http 403 https://registry.npmjs.org/glad
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=60',
32 verbose headers   'content-length': '95',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Fri, 29 May 2015 21:02:01 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-lax1423-LAX',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1432933320.890940,VS0,VE310' }
33 verbose request invalidating /Users/charlie/.npm/registry.npmjs.org/glad on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 0.1.8." : glad
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:368:22)
35 verbose stack     at Request.emit (events.js:110:17)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1219:14)
35 verbose stack     at Request.emit (events.js:129:20)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1167:12)
35 verbose stack     at IncomingMessage.emit (events.js:129:20)
35 verbose stack     at _stream_readable.js:908:16
35 verbose stack     at process._tickCallback (node.js:355:11)
36 verbose statusCode 403
37 verbose pkgid glad
38 verbose cwd /private/var/www/glad
39 error Darwin 14.3.0
40 error argv "node" "/usr/local/bin/npm" "publish"
41 error node v0.12.0
42 error npm  v2.10.0
43 error code E403
44 error "You cannot publish over the previously published version 0.1.8." : glad
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
